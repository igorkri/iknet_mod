/**
 * Created by indiwine on 03.11.2015.
 */
var mainDebug = true;
var EMA = {};

/* ------------EMA ENGINE AJAX ------------*/
function ajaxObjectFactory(classToCall, getXMLModel){
    if (getXMLModel === undefined) {
        getXMLModel = true;
    }
    this.model = undefined;
    this.error = false;
    if(classToCall === undefined){
        throw new TypeError("No argument");
    }

    if (getXMLModel === true) {
        var xmlQueryData = new ajaxDataPort();
        xmlQueryData.action = "getXMLModel";
        xmlQueryData.class = classToCall;
        var xmlModelQuery = readData(xmlQueryData);        
    }

    var methodsQueryData = new ajaxDataPort();
    methodsQueryData.action = "getAjaxMethods";
    methodsQueryData.class = classToCall;
    var methodsQuery = readData(methodsQueryData);

    if (getXMLModel === true) {
        this.objPromise = $.when(xmlModelQuery, methodsQuery);
    }else{
        this.objPromise = $.when(methodsQuery);
    }
    


    EMA[classToCall] = new Object();
    EMA[classToCall].objPromise = this.objPromise;

    this.objPromise.fail(function(){
        delete (EMA[classToCall]);
    });

    if (getXMLModel === true) {
        this.objPromise.done(function(data1, data2){
            try {
                var objectModel = new Object;
                var xmlDoc = $.parseXML(data1[0]);
                $.each($(xmlDoc).children("class").children("fields").children("var"), function(index, value){
                    objectModel[$(value).attr("name")] = new Object();
                    $.each(this.attributes, function() {
                        if(this.specified) {
                            if(this.name === "data-type" && this.value === "JSON"){
                                objectModel[$(value).attr("name")]['json'] = new Object();
                                 $(xmlDoc).children("class").children("json").children($(value).attr("name")).children("var").each(function(){
                                        var attrObject = new Object();
                                        $.each(this.attributes, function() {
                                            if(this.specified) {
                                                attrObject[this.name] = this.value;
                                            }
                                        });
                                     objectModel[$(value).attr("name")]['json'][$(this).attr("name")] = attrObject;
                                     delete attrObject;
                                 });   
                            }else{
                                objectModel[$(value).attr("name")][this.name] = this.value;
                            }
                        }
                    });
                });
                EMA[classToCall].model = objectModel;
                $.each($.parseJSON(data2[0]), function (i, val) {
                    EMA[classToCall][val] = function (args) {
                        if(args instanceof FormData){
                            args.append("action", "standardMethod");
                            args.append("class", classToCall);
                            args.append("method", val);
                            promiseObj = readData(args, false);
                        }else{
                            var queryData = new ajaxDataPort();
                            queryData.class = classToCall;
                            queryData.method = val;
                            queryData.arguments = args;
                            promiseObj = readData(queryData);
                        }
                        return promiseObj;
                    }
                });
            } catch (exp){
                printDbgMsg(exp);
                alert("Incorrect data from server received");
                delete (EMA[classToCall]);
            }
        });
    }else{
        this.objPromise.done(function(data1){
            try {
                $.each($.parseJSON(data1), function (i, val) {
                    EMA[classToCall][val] = function (args) {
                        var queryData = new ajaxDataPort();
                        queryData.class = classToCall;
                        queryData.method = val;
                        queryData.arguments = args;
                        promiseObj = readData(queryData);
                        return promiseObj;
                    }
                });
            } catch (exp){
                printDbgMsg(exp);
                alert("Incorrect data from server received");
                delete (EMA[classToCall]);
            }
        });
    }

    return this.objPromise;
}
EMA.parseFormData = function(className, formID){
    var isFileAppended = false;

    var model = EMA[className].model;

    var formNode = $("#"+formID);

    if(model === undefined){
        throw new Error("No Such Class");
    }

    if(formNode.length < 1){
        throw new Error("No such form");
    }

    var processFormElement = function(index){
        var isCkeditor = false;
        if(typeof CKEDITOR !== "undefined"){
            if(typeof CKEDITOR.instances[index] === "object"){
                isCkeditor = true;
            }
        }
        if(isCkeditor === true){
            inputValue = CKEDITOR.instances[index].getData();
            if(inputValue.length > 0){
                return inputValue;
            } else {
                return false;
            }
        }

        var inputNode = formNode.find("#"+index);
        var nodeType = inputNode.attr("type");
        if(nodeType == "text" || nodeType == "textarea"){

            if(inputNode.length > 0){
                var inputValue = inputNode.val();
                if(inputValue.length > 0){
                    return inputValue;
                }
            }
        } else if(nodeType == 'checkbox'){
            if(inputNode.prop("checked") === true){
                return "1";
            } else {
                return "0";
            }
        }

        return false;
    };

    var processFormModel = function(model){
        var collectedData = {};
        jQuery.each(model, function(index, value){
            if(value.json !== null && typeof value.json == "object"){
                jsonCallData = processFormModel(value.json);
                if(Object.keys(jsonCallData).length > 0){
                    collectedData[index] = jsonCallData;
                }
            }else{
                if(value.file !== undefined && value.file == "true"){
                    var fileNodes = $("#"+index);
                    if(fileNodes.length > 0){
                        jQuery.each(fileNodes[0].files, function(i, file){
                            formData.append(index, file);
                            isFileAppended = true;
                        });
                    }
                } else {
                    var elemIds = [];
                    if(value.localization == "true"){
                        var localizedNodes = EMA.validateForm.findLocalizedInputs(formNode, index);
                        $.each(localizedNodes, function(key, node){
                            elemIds.push($(node).attr("id"));
                        });
                    } else {
                        elemIds.push(index);
                    }

                    $.each(elemIds, function(key, id){
                        var inputValue = processFormElement(id);
                        if(inputValue !== false){
                            collectedData[id] = inputValue;
                        }
                    });

                }
            }
        });
        return collectedData;
    };


    var formData = new FormData();
    var processedForm = processFormModel(model);

    if(isFileAppended === true){
        processedForm = JSON.stringify(processedForm);
        formData.append("arguments", processedForm);
        return formData;
    }else{
        return processedForm;
    }
};
EMA.validateForm = function(className, formID, withLocalization){
    var model = EMA[className].model;

    var formNode = $("#"+formID);
    if(withLocalization === undefined){
        withLocalization = false;
    }

    var validateElement = function(model, elementValue){
        elementError = false;
        if(model.regexp !== undefined){
            var regexDetectingRegex = /\/((?![*+?])(?:[^\r\n\[/\\]|\\.|\[(?:[^\r\n\]\\]|\\.)*\])+)\/((?:g(?:im?|m)?|i(?:gm?|m)?|m(?:gi?|i)?)?)/;
            var regExpArr = regexDetectingRegex.exec(model.regexp);
            if(regExpArr !== null){
                var regExpIns = new RegExp(regExpArr[1], regExpArr[2]);
                if(regExpIns.test(elementValue) === false){
                    elementError = true;
                }
            }
        }

        if(model['min-lenght'] !== undefined){
            if(elementValue.length < model['min-lenght']){
                elementError = true;
            }
        }

        if(model['max-lenght'] !== undefined){
            if(elementValue.length > model['max-lenght']){
                elementError = true;
            }
        }

        if(model['min-value'] !== undefined){
            if(elementValue < model['min-value']){
                elementError = true;
            }
        }

        if(model['max-value'] !== undefined){
            if(elementValue > model['max-value']){
                elementError = true;
            }
        }
        if(elementError === true){
            return false;
        }else{
            return true;
        }
    };

    var validateModel = function(model){
        var errorDetected = false;
        jQuery.each(model, function (index, value){
            if(value.json !== null && typeof value.json == "object") {
                if(validateModel(value.json) === false){
                    errorDetected = true;
                }
            }
            var inputNode;
            if(value.localization == "true" && withLocalization === true){
                inputNode = EMA.validateForm.findLocalizedInputs(formNode, index);
            }else {
                inputNode = formNode.find("#"+index);
            }

            $.each(inputNode, function(key, workingNode){
                var correctType = false;
                var nodeType = $(workingNode).attr("type");
                if(nodeType == "text" || nodeType == "textarea") {
                    correctType = true;
                }
                if(correctType){
                    var elementValue = $(workingNode).val();
                    var elementValid = validateElement(value, elementValue);
                    if(elementValid){
                        $(workingNode).removeClass("error").addClass("success");
                    } else {
                        $(workingNode).removeClass("success").addClass("error");
                        errorDetected = true;
                    }
                }

            });

        });

        if(errorDetected === false){
            return true;
        }else{
            return false;
        }
    };

    return validateModel(model);
};
EMA.validateForm.findLocalizedInputs = function(formNode, fieldName){
    var findNodes = formNode.find("[id^="+fieldName+"]");
    var re = new RegExp("^"+fieldName+"_([a-zA-Z]{2})$");
    var newNodes = [];
    $.each(findNodes, function(index, value){
        var nodeId = $(this).attr("id");
        if(re.test(nodeId) === true){
            newNodes.push(value);
        }
    });
    return newNodes;
};
EMA.truncateString = function(str, len, filler){
    if(len === undefined){
        len = 7;
    }
    if(filler === undefined){
        filler = "...";
    }
    if(typeof str === "string"){
        if(str.length > len){
            str = str.substring(0, len);
            str = str+filler;
        }
    }

    return str;
};
EMA.tools = function(){};
EMA.tools.appendIsnamonly = function(){
    $('input[data-isnamonly="true"]').each(function(index, element) {
        $(this).keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    // Allow: Ctrl+A
                (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                (e.keyCode >= 35 && e.keyCode <= 39)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });
    });
};
EMA.tools.getUrlParameter = function(sParam) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1)),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : sParameterName[1];
        }
    }
};
EMA.tools.nl2br = function(str, is_xhtml) {
    var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br />' : '<br>';
    return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1'+ breakTag +'$2');
};

/* ----------- AJAX METHODS --------------*/
function readData(data, processData){

    if(processData === undefined){
        processData = true;
    }
    var ajaxOptions = {
        url: "/ajax",
        type: "POST",
        data: data,
        beforeSend: function(){
            NProgress.start()
        },
        xhr: function() {
            var xhr = new window.XMLHttpRequest();
            xhr.upload.addEventListener("progress", function(evt) {
                if (evt.lengthComputable) {
                    var percentComplete = evt.loaded / evt.total;
                    NProgress.set(percentComplete/2);
                }
            }, false);

            xhr.addEventListener("progress", function(evt) {
                if (evt.lengthComputable) {
                    var percentComplete = evt.loaded / evt.total;
                    NProgress.set(percentComplete);
                }
            }, false);

            return xhr;
        },
        complete: function(){
            NProgress.done();
        }
    };
    if(processData === false){
        ajaxOptions['processData'] = false;
        ajaxOptions['contentType'] = false;
    }
    var ajaxDefraded = $.ajax(ajaxOptions);

/*    ajaxDefraded.done(function(data){
        console.log(data);
    });*/
    ajaxDefraded.fail(function(data){
        alert("Ошибка передачи данных, попробуйте еще раз\n"+JSON.stringify(data));
    });
    return ajaxDefraded;
}

function ajaxDataPort(){
    this.action = "standardMethod";
    this.class = "";
    this.method = "";
    this.arguments = "";
}

function printDbgMsg(exc){
    if(mainDebug === false || mainDebug === undefined){
        return;
    }
    if(exc instanceof Error){
        console.log("Exception thrown:\n"+exc.name+" : "+exc.message+"\n");
    }else{
        console.log("Debug Msg:\n"+exc+"\n");
    }
}

